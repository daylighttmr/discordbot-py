import discord
from discord.ext import commands
import os
import random
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from dotenv import load_dotenv
load_dotenv()

# Set command prefix and bot token from environment variables
PREFIX = os.getenv('PREFIX')
TOKEN = os.getenv('TOKEN')

# Set up Google Sheets API credentials
creds = ServiceAccountCredentials.from_json_keyfile_name('daylighttmr-bcd50a44ed0c.json', ['https://www.googleapis.com/auth/spreadsheets'])

# Create bot instance
bot = commands.Bot(command_prefix=PREFIX)

# File path for storing the member sheets data
DATA_FILE = "member_sheets.json"

# Load member sheets data from file
def load_member_sheets():
    try:
        with open(DATA_FILE, "r", encoding='UTF-8') as file:
            json_data = file.read()
            data_dict = json.loads(json_data)
            return data_dict
    except FileNotFoundError:
        return {}

# Save member sheets data to file
def save_member_sheets(member_sheets):
    with open(DATA_FILE, "w", encoding='UTF-8') as file:
        json.dump(member_sheets, file, ensure_ascii=False)

# Load member sheets data on bot startup
def setup_bot():
    global member_sheets
    member_sheets = load_member_sheets()
    print(f"Logged in as {bot.user}.")



# Respond to messages
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if message.content == f'{PREFIX}call':
        await message.channel.send("callback!")

    if message.content.startswith(f'{PREFIX}hello'):
        await message.channel.send('Hello!')

    await bot.process_commands(message)

# Load member sheets data after bot is ready
@bot.event
async def on_ready():
    setup_bot()

    
@bot.command(name='1D6')
async def roll_dice(ctx):
    dice_roll = random.randint(1, 6)
    await ctx.reply(f"üé≤ {dice_roll}!")
    
    
@bot.command(name='2D6')
async def add_dice(ctx, num1: int = 0, num2: int = 0):
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    dice_sum = dice1 + dice2 + num1 + num2
    
    if dice_sum >= 12:
        await ctx.reply(f"üé≤ {dice1} , {dice2}. \r Í≤∞Í≥ºÎäî {dice_sum}, :star2: *ÌäπÎ≥Ñ ÏÑ±Í≥µ* :star2:")
    elif dice_sum >= 10:
        await ctx.reply(f"üé≤ {dice1} , {dice2}. Í≤∞Í≥ºÎäî {dice_sum}, :star2: *ÎèÑÏ†Ñ ÏÑ±Í≥µ*")
    elif dice_sum >= 8:
        await ctx.reply(f"üé≤ {dice1} , {dice2}. Í≤∞Í≥ºÎäî {dice_sum}, :star: *ÏùºÎ∞ò ÏÑ±Í≥µ*")
    else:
        await ctx.reply(f"üé≤ {dice1} , {dice2}. Í≤∞Í≥ºÎäî {dice_sum}. ")

        
@bot.command(name='YN')
async def yes_or_no(ctx):
    responses = ["YES", "NO", "YUP", "NOPE", "üëç", "üëé", "‚≠ïÔ∏è", "‚ùå"]
    response = random.choice(responses)
    await ctx.reply(response)
    
@bot.command(name='AWHO')
async def awho(ctx):
    anames = ["Ìè¨Î™®ÎÇò Î®∏Ìîº". "Í∑∏ÎùºÏãúÏïÑ Î∏îÎûëÏΩî", "Îãâ ÏºÑÎìúÎ¶≠", "Îç∞Ïù¥Îπó", "ÏóêÏù¥Î≤ÑÎ¶¨ ÏúåÎ¶¨ÏóÑÏä§", "Î≤†ÎÑ§ ÏÇ∞ÎìúÎ£®", "Î†àÎ≤†Ïπ¥", "Î≤†Ìã∞ Ïõ∞Ï¶à", "ÎÑ§Ïù¥ÏÑ† ÌçºÏÜåÌîÑ", "Î°úÎ≤ÑÌä∏ 'Î°≠' Í∏ÄÎ†å", "Ïä§ÌÖåÌååÎãà Î£®ÎπÑÏò§", "Ìï®ÏòÅÏÑ† Îç∞Ïò§ÎèÑÎùº", "ÌïÑÎ¶Ω Ïõ∞ÎûúÎìú", "Î°úÎØ∏Ïò§ ÌîºÏïÑÌîÑ", "ÎãàÌÇ§ ÎπÖ"]
    callname = random.choice(anames)
    await ctx.reply(callname)
    
@bot.command(name='BWHO')
async def bwho(ctx):
    bnames = ["ÏºÄÏùºÎüº Î∞ò Ïõ®Ïä§ÌÑ¥", "Îç∞Ïù¥ÎπÑÎìú Ï°∞Îãà Î∞îÎãàÏä§ÌÑ∞", "Î¶¨ÏΩî Î≤ÑÌò∏Î≤§", "ÌÅ¨Î¶¨Ïä§ Í∞ÄÎç∞ÎãàÏïÑ", "Ìó§Î≤® Î°úÌó¨", "Î∞ÄÎü¨ Ï†úÏù¥", "Î°úÏ†Ä ÌïòÏõåÎìú", "Ïò¨Î¶¨Î≤Ñ ÏúàÏä§ÌÑ¥", "Í∞ÄÎ∏åÎ¶¨Ïóò ÏΩîÏä§ÌÉÄ", "Ïù¥ÎÖ∏Ïä§ ÎßàÏÖú", "ÎπåÎ¶¨ ÍπÅÏä§", "Î≤§ÏûêÎØº ÏúÑÎ≤Ñ", "ÏïåÎßà ÎçòÏä§Ìä∏", "ÌÅ¨Î†àÏù¥Í∑∏ ÏºàÎ®º", "Îã§ÎãàÏóò Ìè¨ÌÑ∞ÌïÑÎìú", "Ïò§Ïä§Ìã¥ Î∞ï"]
    namecall = random.choice(bnames)
    await ctx.reply(namecall)
    
    
# Random paragraph
paragraphs = [
    "This is the first paragraph.",
    "Here is another paragraph.",
    "This is the third paragraph.",
    "Yet another paragraph.",
    "And finally, a fifth paragraph."
]

@bot.command(name='GO')
async def random_paragraph(ctx):
    random_p = random.choice(paragraphs)
    embed = discord.Embed(title="Random Paragraph", description=random_p)
    await ctx.send(embed=embed)


# Register user's worksheet
@bot.command(name='Îì±Î°ù')
async def register_sheet(ctx, sheet_name: str):
    # Save the sheet name in the member_sheets dictionary
    member_id = ctx.author.id
    # print('member_id:', member_id)
    # print('id type:', type(member_id))
    # print('Ï†ÑÏ≤¥ m.s:', member_sheets)
    # print('ÌÉÄÏûÖ:', type(member_sheets))
    member_sheets[str(member_id)] = sheet_name
    # print('m_s dict ÏóÖÎç∞Ïù¥Ìä∏:', member_sheets[member_id])
    # print('ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ m.s:', member_sheets)

    # Save the member_sheets dictionary to file
    save_member_sheets(member_sheets)
    await update_member_worksheet(ctx, member_sheets)
    # Reply to the message with the registration confirmation
    await ctx.reply(f"üåá {ctx.author.name}Ïùò ÏãúÌä∏ '{sheet_name}' Îì±Î°ù ÏôÑÎ£å")

# Get data from registered sheet for the user who sent the command

async def get_member_worksheet(ctx):
    member_id = ctx.author.id
    sheet_name = member_sheets.get(str(member_id))
    
    if sheet_name is None:
        await ctx.reply("üòµ ÏãúÌä∏Î•º Îì±Î°ùÌï¥Ï£ºÏÑ∏Ïöî.")
        return None
    
    try:
        # Authenticate with Google Sheets API
        gc = gspread.authorize(creds)
        
        # Open the Google Spreadsheet by ID
        sheet_id = '1zb5gLeAns7CMUGHlk-4cCC9Tf5V2s4nq_K1Ja7p9U4Y'
        spreadsheet = gc.open_by_key(sheet_id)
        
        # Retrieve the worksheet by name
        worksheet = spreadsheet.worksheet(sheet_name)
        
        return worksheet
    
    except gspread.exceptions.WorksheetNotFound:
        await ctx.reply(f"Sheet '{sheet_name}' not found in the spreadsheet.")
    
    except Exception as e:
        await ctx.reply(f"An error occurred: {str(e)}")
    
    return None

async def update_member_worksheet(ctx, member_sheets):
    print('update_member_worksheet start ====>')
    sheet_name = "JSON"
    try:
        # Authenticate with Google Sheets API
        gc = gspread.authorize(creds)
        
        # Open the Google Spreadsheet by ID
        sheet_id = '1zb5gLeAns7CMUGHlk-4cCC9Tf5V2s4nq_K1Ja7p9U4Y'
        spreadsheet = gc.open_by_key(sheet_id)
        
        # Retrieve the worksheet by name
        
        worksheet = spreadsheet.worksheet(sheet_name)

    
        try:
            worksheet.update('A1', str(member_sheets))

        except Exception as e:
            print(e)
            return {'code' : -2, 'action_result_str' : 'reservation Ïò§Î•ò. Î©îÏÑ∏ÏßÄÎ•º Ï∫°Ï≥ê ÌõÑ Ï¥ùÍ¥ÑÏóêÍ≤å Î¨∏Ïùò Î∞îÎûçÎãàÎã§.' + '\n\n' + str(e)}

        return worksheet
    
    except gspread.exceptions.WorksheetNotFound:
        await ctx.reply(f"Sheet '{sheet_name}' not found in the spreadsheet.")
    
    except Exception as e:
        await ctx.reply(f"An error occurred: {str(e)}")
    
    return None
            
# Command to roll 2D6 dice and add to cell
@bot.command(name='ÏÑ§Îìù')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z26').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏÑ§Îìù Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z26' not found in the worksheet.")
            


@bot.command(name='ÏúÑÌòë')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z27').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏúÑÌòë Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z27' not found in the worksheet.")
            
@bot.command(name='ÌÉêÏÉâ')
async def feel(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AK17
            cell_value = int(worksheet.acell('AK17').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÌÉêÏÉâ {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AK17' not found in the worksheet.")

@bot.command(name='ÌÜµÏ∞∞')
async def think(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AK19
            cell_value = int(worksheet.acell('AK19').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÌÜµÏ∞∞ {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AK19' not found in the worksheet.")
            
            
@bot.command(name='ÎààÏπò')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z28').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÎààÏπò Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z28' not found in the worksheet.")
            

@bot.command(name='ÏÜçÏûÑÏàò')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z29').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏÜçÏûÑÏàò Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z29' not found in the worksheet.")
            
            
# Command to roll 2D6 dice and add to cell Z30
@bot.command(name='ÏÇ¨Í≤©')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z30').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏÇ¨Í≤© Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z30' not found in the worksheet.")
            
            
# Command to roll 2D6 dice and add to cell Z31
@bot.command(name='Ïú°ÌÉÑÏ†Ñ')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z31').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r Ïú°ÌÉÑÏ†Ñ Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z31' not found in the worksheet.")
            
            
# Command to roll 2D6 dice and add to cell Z32
@bot.command(name='Î¨¥Î∏åÎ®ºÌä∏')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z32').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r Î¨¥Î∏åÎ®ºÌä∏ Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z32' not found in the worksheet.")
            
            
# Command to roll 2D6 dice and add to cell Z33
@bot.command(name='ÏùÄÏã†')
async def roll_and_add(ctx):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell Z28
            cell_value = int(worksheet.acell('Z33').value)
            
            # Calculate the sum of the dice roll and the cell value
            sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏùÄÏã† Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'Z33' not found in the worksheet.")
            
                        
@bot.command(name='ÏÜêÏû¨Ï£º')
async def craft(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AJ26
            cell_value = int(worksheet.acell('AJ26').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏÜêÏû¨Ï£º Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AJ26' not found in the worksheet.")
            
            
@bot.command(name='ÏπòÎ£å')
async def heal(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AJ27
            cell_value = int(worksheet.acell('AJ27').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏπòÎ£å Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AJ27' not found in the worksheet.")
            

@bot.command(name='Ïö¥Ï†Ñ')
async def drive(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AJ28
            cell_value = int(worksheet.acell('AJ28').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r Ïö¥Ï†Ñ Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AJ28' not found in the worksheet.")
            
            
@bot.command(name='ÏöîÎ¶¨')
async def cook(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AJ29
            cell_value = int(worksheet.acell('AJ29').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r ÏöîÎ¶¨ Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AJ29' not found in the worksheet.")
            

@bot.command(name='Í∏∞Í≥Ñ')
async def machina(ctx, number: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Roll two six-sided dice
            dice1 = random.randint(1, 6)
            dice2 = random.randint(1, 6)
            
            # Retrieve the current value from cell AJ30
            cell_value = int(worksheet.acell('AJ30').value)
            
            if number is not None:
                # Calculate the sum of the dice roll, cell value, and the mentioned number
                sum_value = cell_value + dice1 + dice2 + number
            else:
                # Calculate the sum of the dice roll and the cell value
                sum_value = cell_value + dice1 + dice2
            
            # Reply to the message with the dice roll and the updated total
            await ctx.reply(f"üé≤ {dice1}, {dice2}! \r Í∏∞Í≥Ñ Í∏∞Ïà† {cell_value}, Ï¥ùÌï© {sum_value}.")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'AJ30' not found in the worksheet.")
            
            
  # Command to retrieve HP value and optionally add a number to it
@bot.command(name='HP')
async def get_and_add_hp(ctx, value: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Retrieve the current value from cell J22
            current_value = int(worksheet.acell('J22').value)
            max_value = int(worksheet.acell('N22').value)
            
            if value is None:
                # If no value is specified, only retrieve and reply with the current value
                await ctx.reply(f"üåá ÌòÑÏû¨ Ï≤¥Î†•: {current_value} / ÏµúÎåÄ Ï≤¥Î†•: {max_value}.")
            else:
                # If a value is specified, add it to the current value and update cell J22
                new_value = current_value + value
                worksheet.update('J22', new_value)
                
                # Determine the message based on the new HP value
                message = "Ïã†Ï≤¥ ÏÉÅÌÉú"
                if new_value >= max_value:
                    message = "Í±¥Í∞ïÌï®"
                elif new_value == 1:
                    message = "ÎπàÏÇ¨: ÌñâÎèô Î∂àÎä•"
                elif new_value < max_value / 4:
                    message = "ÏπòÎ™ÖÏÉÅ: ÌñâÎèô ÌéòÎÑêÌã∞"
                elif 0.5 * max_value < new_value:
                    message = "Í≤ΩÎØ∏Ìïú Î∂ÄÏÉÅ"
                elif new_value >= 2:
                    message = "Ïã¨Ìïú Î∂ÄÏÉÅ"
                
                await ctx.reply(f"üåá Ï≤¥Î†•: {current_value} ÏóêÏÑú {new_value} Î°ú Ï†ÅÏö©. ÌòÑÏû¨ Ïã†Ï≤¥ ÏÉÅÌÉúÎäî {message}")
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("Cell 'J22' or 'N22' not found in the worksheet.")
            
      #Ï†ïÏã†Î†• Ïª§Îß®Îìú
@bot.command(name='SP')
async def get_and_add_sp(ctx, value: int = None):
    worksheet = await get_member_worksheet(ctx)
    
    if worksheet is not None:
        try:
            # Retrieve the current value from cell J25
            current_value = int(worksheet.acell('J25').value)
            max_value = int(worksheet.acell('N25').value)
            
            if value is None:
                # If no value is specified, only retrieve and reply with the current value
                await ctx.reply(f"üåÉ ÌòÑÏû¨ Ï†ïÏã†Î†•: {current_value} / ÏµúÎåÄ Ï†ïÏã†Î†•: {max_value}.")
            else:
                # If a value is specified, add it to the current value and update cell J25
                new_value = current_value + value
                worksheet.update('J25', new_value)
                
                if new_value < max_value * 0.25:
                    # If the condition is met, select a random description from the list
                    descriptions = [
                        "ÎààÏïûÏù¥ Í∞ÄÎ¶¨ÏõåÏßÑ Í≤É Í∞ôÏù¥, Î™®Îì† Í≤ÉÏù¥ Î¨¥ÏùòÎØ∏Ìï¥ÏßÑÎã§‚ãØ‚ãØ.",
                        "Î™©ÏùÑ Ï°∞Î•¥Îäî Í≤É Í∞ôÏùÄ ÏïïÎ∞ïÏóê Ìú©Ïã∏Ïù∏Îã§.",
                        "Î∂àÏïàÏùò ÏàòÎ†ÅÏóê Îπ†ÏßÑ Í≤É Í∞ôÏù¥, Ïà®ÏùÑ Ïâ¥ Ïàò ÏóÜÎã§.",
                        "ÌïúÍ≥ÑÏóê ÎèÑÎã¨ÌñàÎã§. ÎÇ®ÏùÄ Í≤ÉÏùÄ ÌèêÌóàÏôÄ ÌååÍ¥¥ ÎøêÏù¥Îã§‚ãØ‚ãØ."
                    ]
                    embed_description = random.choice(descriptions)
                    
                    embed_title = "Í∑πÎèÑÏùò Ïä§Ìä∏Î†àÏä§ ÏÉÅÌÉú!"
                    
                    # Append the common description
                    embed_description += "\nÏ†ïÏã†Ïù¥ Î¨¥ÎÑàÏßëÎãàÎã§. Ïä§Ïä§Î°úÎ•º, ÌòπÏùÄ ÌÉÄÏù∏ÏùÑ ÎßùÍ∞ÄÎú®Î¶¨ÏßÄ ÏïäÏúºÎ©¥ Í≤¨Îîú Ïàò ÏóÜÏùÑ Ï†ïÎèÑÎ°ú. \r  üí° YN Î™ÖÎ†πÏñ¥Î°ú, ‚≠ïÔ∏è: ÏûêÌï¥ / ‚ùå: ÏÉÅÌï¥Î•º Í≥†Î¶ÖÎãàÎã§. Ïö¥Ïóê Îß°Í∏∞ÏßÄ ÏïäÍ≥† Ïä§Ïä§Î°ú ÏÑ†ÌÉùÌï† ÏàòÎèÑ ÏûàÏäµÎãàÎã§."
                
                elif new_value <= max_value * 0.5:
                    embed_title = "Ïä§Ìä∏Î†àÏä§ Î∞òÏùë Î∞úÎèô!"
                    embed_description = random.choice([
                        "Î≠îÍ∞ÄÍ∞Ä ÏûòÎ™ªÎêêÎã§.",
                        "Ïù¥Í≤å ÏïÑÎãàÏïº, Ïù¥Îü∞ Í≤å ÏïÑÎãàÏïº‚ãØ‚ãØ.",
                        "ÎÇ¥Î©¥ÏóêÏÑú Î≠îÍ∞ÄÍ∞Ä ÎßùÍ∞ÄÏ†∏ Í∞ÑÎã§."
                    ])
                    
                    # Append the common description and the text from cells F30 and F31
                    text1 = worksheet.acell('F30').value
                    text2 = worksheet.acell('F31').value
                    embed_description += f"\nüí° ÌòÑÏû¨ Ï†ïÏã†Î†• {new_value}, Ïä§Ìä∏Î†àÏä§ Î∞òÏùë Î∞úÎèô.\r YN Î™ÖÎ†πÏñ¥Î°ú, ‚≠ïÔ∏è: {text1} / ‚ùå: {text2} Ï§ëÏóêÏÑú Í≥†Î¶ÖÎãàÎã§. Ïö¥Ïóê Îß°Í∏∞ÏßÄ ÏïäÍ≥† Ïä§Ïä§Î°ú ÏÑ†ÌÉùÌï† ÏàòÎèÑ ÏûàÏäµÎãàÎã§. Ïù¥ ÏÉÅÌÉúÎäî Ï†ïÏã†Î†•ÏùÑ ÌöåÎ≥µÌï† ÎïåÍπåÏßÄ Í≥ÑÏÜçÎê©ÎãàÎã§."
                
                else:
                    await ctx.reply(f"üåÉ Ï†ïÏã†Î†•, {current_value}ÏóêÏÑú {new_value}Î°ú Ï†ÅÏö©.")
                    return
                
                # Create and send the embed message
                embed = discord.Embed(title=embed_title, description=embed_description)
                await ctx.reply(embed=embed)
        
        except gspread.exceptions.CellNotFound:
            await ctx.reply("One or more cells not found in the worksheet.")



# Run the bot
bot.run(TOKEN)

